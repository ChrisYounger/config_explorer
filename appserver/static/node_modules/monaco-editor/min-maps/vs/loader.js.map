{"version":3,"sources":["vs/vs/loader.js"],"names":["_amdLoaderGlobal","this","_commonjsGlobal","global","AMDLoader","Environment","_detected","_isWindows","_isNode","_isElectronRenderer","_isWebWorker","Object","defineProperty","prototype","get","_detect","enumerable","configurable","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","isWindows","uri","decodeURI","replace","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","err","errorCode","console","error","moduleId","stack","neededBy","baseUrl","isBuild","paths","config","catchError","urlArgs","onError","ignoreDuplicateModules","cspNonce","nodeModules","nodeCachedDataWriteDelay","onNodeCachedData","data","warn","path","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","isNode","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","OnlyOnceScriptLoader","_scriptLoader","_callbackMap","load","moduleManager","scriptSrc","errorback","isWebWorker","WorkerScriptLoader","NodeScriptLoader","BrowserScriptLoader","scriptCallbacks","triggerCallback","triggerErrorback","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getConfig","getElementsByTagName","appendChild","_didInitialize","_didPatchNodeRequire","_init","_fs","_vm","_path","_crypto","_jsflags","argv","arg","_initNodeRequire","nodeCachedDataDir","that","Module","_compile","content","wrapper","wrap","cachedDataPath","_getCachedDataPath","cachedData","readFileSync","produceCachedData","Script","compileWrapper","runInThisContext","dirname","require","mod","constructor","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","makeRequireFunction","args","Buffer","apply","_processCachedData","opts","nodeInstrumenter","c","recorder","getRecorder","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","readFile","encoding","normalizedScriptSrc","normalize","vmScriptSrc","isElectronRenderer","driveLetterMatch","match","toUpperCase","contents","prefix","charCodeAt","_BOM","cachedDataPath_1","_loadAndEvalScript","r","globalDefineFunc","getGlobalAMDDefineFunc","receivedDefineCall","localDefineFunc","arguments","amd","call","getGlobalAMDRequireFunc","Error","basedir","hash","createHash","update","digest","basename","join","cachedDataRejected","_runSoon","unlink","cachedDataProduced","undefined","writeFile","minTimeout","timeout","ceil","random","setTimeout","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","init","_nodeRequire_1","what","RequireFunc","DefineFunc","jQuery","_requireFunc_config","doNotInitLoader"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar _commonjsGlobal = typeof global === 'object' ? global : {};\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    var Environment = (function () {\n        function Environment() {\n            this._detected = false;\n            this._isWindows = false;\n            this._isNode = false;\n            this._isElectronRenderer = false;\n            this._isWebWorker = false;\n        }\n        Object.defineProperty(Environment.prototype, \"isWindows\", {\n            get: function () {\n                this._detect();\n                return this._isWindows;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isNode\", {\n            get: function () {\n                this._detect();\n                return this._isNode;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isElectronRenderer\", {\n            get: function () {\n                this._detect();\n                return this._isElectronRenderer;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isWebWorker\", {\n            get: function () {\n                this._detect();\n                return this._isWebWorker;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Environment.prototype._detect = function () {\n            if (this._detected) {\n                return;\n            }\n            this._detected = true;\n            this._isWindows = Environment._isWindows();\n            this._isNode = (typeof module !== 'undefined' && !!module.exports);\n            this._isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n            this._isWebWorker = (typeof AMDLoader.global.importScripts === 'function');\n        };\n        Environment._isWindows = function () {\n            if (typeof navigator !== 'undefined') {\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                    return true;\n                }\n            }\n            if (typeof process !== 'undefined') {\n                return (process.platform === 'win32');\n            }\n            return false;\n        };\n        return Environment;\n    }());\n    AMDLoader.Environment = Environment;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEvent = (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(1 /* LoaderAvailable */, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        return NullLoaderEventRecorder;\n    }());\n    NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\n            uri = decodeURI(uri).replace(/%23/g, '#');\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return Utilities.startsWith(id, '===anonymous');\n        };\n        Utilities.getHighPerformanceTimestamp = function () {\n            if (!this.PERFORMANCE_NOW_PROBED) {\n                this.PERFORMANCE_NOW_PROBED = true;\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n            }\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\n        };\n        return Utilities;\n    }());\n    Utilities.NEXT_ANONYMOUS_ID = 1;\n    Utilities.PERFORMANCE_NOW_PROBED = false;\n    Utilities.HAS_PERFORMANCE_NOW = false;\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var ConfigurationOptionsUtil = (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\n            function defaultOnError(err) {\n                if (err.errorCode === 'load') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error('Detail: ', err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.errorCode === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                options.catchError = false;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (typeof options.cspNonce !== 'string') {\n                options.cspNonce = '';\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (typeof options.nodeCachedDataWriteDelay !== 'number' || options.nodeCachedDataWriteDelay < 0) {\n                options.nodeCachedDataWriteDelay = 1000 * 7;\n            }\n            if (typeof options.onNodeCachedData !== 'function') {\n                options.onNodeCachedData = function (err, data) {\n                    if (!err) {\n                        // ignore\n                    }\n                    else if (err.errorCode === 'cachedDataRejected') {\n                        console.warn('Rejected cached data from file: ' + err.path);\n                    }\n                    else if (err.errorCode === 'unlink' || err.errorCode === 'writeFile') {\n                        console.error('Problems writing cached data file: ' + err.path);\n                        console.error(err.detail);\n                    }\n                    else {\n                        console.error(err);\n                    }\n                };\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = (function () {\n        function Configuration(env, options) {\n            this._env = env;\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename && this._env.isNode) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (this.options.nodeMain && this._env.isNode) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = (function () {\n        function OnlyOnceScriptLoader(env) {\n            this._env = env;\n            this._scriptLoader = null;\n            this._callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            if (!this._scriptLoader) {\n                this._scriptLoader = (this._env.isWebWorker\n                    ? new WorkerScriptLoader()\n                    : this._env.isNode\n                        ? new NodeScriptLoader(this._env)\n                        : new BrowserScriptLoader());\n            }\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this._callbackMap.hasOwnProperty(scriptSrc)) {\n                this._callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this._callbackMap[scriptSrc] = [scriptCallbacks];\n            this._scriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            // Propagate CSP nonce to dynamically created script tag.\n            var cspNonce = moduleManager.getConfig().getOptionsLiteral().cspNonce;\n            if (cspNonce) {\n                script.setAttribute('nonce', cspNonce);\n            }\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                importScripts(scriptSrc);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = (function () {\n        function NodeScriptLoader(env) {\n            this._env = env;\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            // capture node modules\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n            // js-flags have an impact on cached data\n            this._jsflags = '';\n            for (var _i = 0, _a = process.argv; _i < _a.length; _i++) {\n                var arg = _a[_i];\n                if (arg.indexOf('--js-flags=') === 0) {\n                    this._jsflags = arg;\n                    break;\n                }\n            }\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            var nodeCachedDataDir = moduleManager.getConfig().getOptionsLiteral().nodeCachedDataDir;\n            if (!nodeCachedDataDir || this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang\n                content = content.replace(/^#!.*/, '');\n                // create wrapper function\n                var wrapper = Module.wrap(content);\n                var cachedDataPath = that._getCachedDataPath(nodeCachedDataDir, filename);\n                var options = { filename: filename };\n                try {\n                    options.cachedData = that._fs.readFileSync(cachedDataPath);\n                }\n                catch (e) {\n                    options.produceCachedData = true;\n                }\n                var script = new that._vm.Script(wrapper, options);\n                var compileWrapper = script.runInThisContext(options);\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, _commonjsGlobal, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                that._processCachedData(moduleManager, script, cachedDataPath);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var normalizedScriptSrc = _this._path.normalize(scriptSrc);\n                    var vmScriptSrc = normalizedScriptSrc;\n                    // Make the script src friendly towards electron\n                    if (_this._env.isElectronRenderer) {\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\n                        if (driveLetterMatch) {\n                            // windows\n                            vmScriptSrc = \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n                        }\n                        else {\n                            // nix\n                            vmScriptSrc = \"file://\" + vmScriptSrc;\n                        }\n                    }\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        contents = prefix + data.substring(1) + suffix;\n                    }\n                    else {\n                        contents = prefix + data + suffix;\n                    }\n                    contents = nodeInstrumenter(contents, normalizedScriptSrc);\n                    if (!opts.nodeCachedDataDir) {\n                        _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, { filename: vmScriptSrc }, recorder, callback, errorback);\n                    }\n                    else {\n                        var cachedDataPath_1 = _this._getCachedDataPath(opts.nodeCachedDataDir, scriptSrc);\n                        _this._fs.readFile(cachedDataPath_1, function (err, cachedData) {\n                            // create script options\n                            var options = {\n                                filename: vmScriptSrc,\n                                produceCachedData: typeof cachedData === 'undefined',\n                                cachedData: cachedData\n                            };\n                            var script = _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder, callback, errorback);\n                            _this._processCachedData(moduleManager, script, cachedDataPath_1);\n                        });\n                    }\n                });\n            }\n        };\n        NodeScriptLoader.prototype._loadAndEvalScript = function (moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder, callback, errorback) {\n            // create script, run script\n            recorder.record(31 /* NodeBeginEvaluatingScript */, scriptSrc);\n            var script = new this._vm.Script(contents, options);\n            var r = script.runInThisContext(options);\n            var globalDefineFunc = moduleManager.getGlobalAMDDefineFunc();\n            var receivedDefineCall = false;\n            var localDefineFunc = function () {\n                receivedDefineCall = true;\n                return globalDefineFunc.apply(null, arguments);\n            };\n            localDefineFunc.amd = globalDefineFunc.amd;\n            r.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), localDefineFunc, vmScriptSrc, this._path.dirname(scriptSrc));\n            // signal done\n            recorder.record(32 /* NodeEndEvaluatingScript */, scriptSrc);\n            if (receivedDefineCall) {\n                callback();\n            }\n            else {\n                errorback(new Error(\"Didn't receive define call in \" + scriptSrc + \"!\"));\n            }\n            return script;\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (basedir, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(this._jsflags, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(basedir, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._processCachedData = function (moduleManager, script, cachedDataPath) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // data rejected => delete cache file\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                    errorCode: 'cachedDataRejected',\n                    path: cachedDataPath\n                });\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.unlink(cachedDataPath, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                                errorCode: 'unlink',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n            else if (script.cachedDataProduced) {\n                // data produced => tell outside world\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData(undefined, {\n                    path: cachedDataPath,\n                    length: script.cachedData.length\n                });\n                // data produced => write cache file\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.writeFile(cachedDataPath, script.cachedData, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                                errorCode: 'writeFile',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n        };\n        NodeScriptLoader._runSoon = function (callback, minTimeout) {\n            var timeout = minTimeout + Math.ceil(Math.random() * minTimeout);\n            setTimeout(callback, timeout);\n        };\n        return NodeScriptLoader;\n    }());\n    NodeScriptLoader._BOM = 0xFEFF;\n    function createScriptLoader(env) {\n        return new OnlyOnceScriptLoader(env);\n    }\n    AMDLoader.createScriptLoader = createScriptLoader;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        return ModuleIdResolver;\n    }());\n    ModuleIdResolver.ROOT = new ModuleIdResolver('');\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(21 /* BeginInvokeFactory */, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(22 /* EndInvokeFactory */, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                config.onError({\n                    errorCode: 'factory',\n                    moduleId: this.strId,\n                    detail: producedError\n                });\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        return RegularDependency;\n    }());\n    RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n    RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n    RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = (function () {\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._env = env;\n            this._scriptLoader = scriptLoader;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._defineFunc = defineFunc;\n            this._requireFunc = requireFunc;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration(this._env);\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._recorder = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager.prototype.reset = function () {\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\n        };\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\n            return this._defineFunc;\n        };\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\n            return this._requireFunc;\n        };\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = m.dependencies.map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(this._env, params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            return {\n                errorCode: 'load',\n                moduleId: strModuleId,\n                neededBy: neededBy,\n                detail: err\n            };\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                if (path !== null) {\n                    path.push(fromId);\n                    return path;\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            var scopedPackageRegex = /^@[^\\/]+\\/[^\\/]+$/; // matches @scope/package-name\n            if (this._env.isNode && (strModuleId.indexOf('/') === -1 || scopedPackageRegex.test(strModuleId))) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(10 /* BeginLoadingScript */, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(11 /* EndLoadingScriptOK */, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(12 /* EndLoadingScriptError */, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    module.exportsPassedIn = true;\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule && dependencyModule.isComplete()) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (this._hasDependencyPath(dependency.id, module.id)) {\n                    console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                    var cyclePath = this._findCyclePath(dependency.id, module.id, 0);\n                    cyclePath.reverse();\n                    cyclePath.push(dependency.id);\n                    console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                    // Break the cycle\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                // record inverse dependency\n                this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                this._inverseDependencies2[dependency.id].push(module.id);\n                if (dependency instanceof PluginDependency) {\n                    var plugin = this._modules2[dependency.pluginId];\n                    if (plugin && plugin.isComplete()) {\n                        this._loadPluginDependency(plugin.exports, dependency);\n                        continue;\n                    }\n                    // Record dependency for when the plugin gets loaded\n                    var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                    if (!inversePluginDeps) {\n                        inversePluginDeps = [];\n                        this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                    }\n                    inversePluginDeps.push(dependency);\n                    this._loadModule(dependency.pluginId);\n                    continue;\n                }\n                this._loadModule(dependency.id);\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    dependenciesValues[i] = module.exports;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    dependenciesValues[i] = {\n                        id: module.strId,\n                        config: function () {\n                            return _this._config.getConfigForModule(module.strId);\n                        }\n                    };\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule) {\n                    dependenciesValues[i] = dependencyModule.exports;\n                    continue;\n                }\n                dependenciesValues[i] = null;\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var env = new AMDLoader.Environment();\n    var moduleManager = null;\n    var DefineFunc = function (id, dependencies, callback) {\n        if (typeof id !== 'string') {\n            callback = dependencies;\n            dependencies = id;\n            id = null;\n        }\n        if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n            callback = dependencies;\n            dependencies = null;\n        }\n        if (!dependencies) {\n            dependencies = ['require', 'exports', 'module'];\n        }\n        if (id) {\n            moduleManager.defineModule(id, dependencies, callback, null, null);\n        }\n        else {\n            moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n        }\n    };\n    DefineFunc.amd = {\n        jQuery: true\n    };\n    var _requireFunc_config = function (params, shouldOverwrite) {\n        if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n        moduleManager.configure(params, shouldOverwrite);\n    };\n    var RequireFunc = function () {\n        if (arguments.length === 1) {\n            if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                _requireFunc_config(arguments[0]);\n                return;\n            }\n            if (typeof arguments[0] === 'string') {\n                return moduleManager.synchronousRequire(arguments[0]);\n            }\n        }\n        if (arguments.length === 2 || arguments.length === 3) {\n            if (Array.isArray(arguments[0])) {\n                moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                return;\n            }\n        }\n        throw new Error('Unrecognized require call');\n    };\n    RequireFunc.config = _requireFunc_config;\n    RequireFunc.getConfig = function () {\n        return moduleManager.getConfig().getOptionsLiteral();\n    };\n    RequireFunc.reset = function () {\n        moduleManager = moduleManager.reset();\n    };\n    RequireFunc.getBuildInfo = function () {\n        return moduleManager.getBuildInfo();\n    };\n    RequireFunc.getStats = function () {\n        return moduleManager.getLoaderEvents();\n    };\n    RequireFunc.define = function () {\n        return DefineFunc.apply(null, arguments);\n    };\n    function init() {\n        if (typeof AMDLoader.global.require !== 'undefined' || typeof require !== 'undefined') {\n            var _nodeRequire_1 = (AMDLoader.global.require || require);\n            if (typeof _nodeRequire_1 === 'function' && typeof _nodeRequire_1.resolve === 'function') {\n                // re-expose node's require function\n                var nodeRequire = function (what) {\n                    moduleManager.getRecorder().record(33 /* NodeBeginNativeRequire */, what);\n                    try {\n                        return _nodeRequire_1(what);\n                    }\n                    finally {\n                        moduleManager.getRecorder().record(34 /* NodeEndNativeRequire */, what);\n                    }\n                };\n                AMDLoader.global.nodeRequire = nodeRequire;\n                RequireFunc.nodeRequire = nodeRequire;\n                RequireFunc.__$__nodeRequire = nodeRequire;\n            }\n        }\n        if (env.isNode && !env.isElectronRenderer) {\n            module.exports = RequireFunc;\n            require = RequireFunc;\n        }\n        else {\n            if (!env.isElectronRenderer) {\n                AMDLoader.global.define = DefineFunc;\n            }\n            AMDLoader.global.require = RequireFunc;\n        }\n    }\n    AMDLoader.init = init;\n    if (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd) {\n        moduleManager = new AMDLoader.ModuleManager(env, AMDLoader.createScriptLoader(env), DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\n        // The global variable require can configure the loader\n        if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n            RequireFunc.config(AMDLoader.global.require);\n        }\n        // This define is for the local closure defined in node in the case that the loader is concatenated\n        define = function () {\n            return DefineFunc.apply(null, arguments);\n        };\n        define.amd = DefineFunc.amd;\n        if (typeof doNotInitLoader === 'undefined') {\n            init();\n        }\n    }\n})(AMDLoader || (AMDLoader = {}));\n"]}